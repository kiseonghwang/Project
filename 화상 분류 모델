{"cells":[{"cell_type":"markdown","metadata":{"id":"lrbNj4n91T8P"},"source":["\n","scaled_1st degree burn\n","scaled_2nd degree burn\n","scaled_3nd degree burn"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9100,"status":"ok","timestamp":1692316970013,"user":{"displayName":"황기성","userId":"00510822396737292722"},"user_tz":-540},"id":"WHZaMiJ-VSil","outputId":"43b369ab-727d-4471-c7c0-6dc59b1f08f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"H9ZcABsZfBsF","executionInfo":{"status":"ok","timestamp":1692316981466,"user_tz":-540,"elapsed":11457,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","import cv2\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","from tensorflow import keras\n","from keras import layers"]},{"cell_type":"markdown","metadata":{"id":"S-kgS2ol5dQ7"},"source":["# 화상 1전처리 코드"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"PHxsOftPpB-H","executionInfo":{"status":"ok","timestamp":1692317642053,"user_tz":-540,"elapsed":22381,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["import multiprocessing\n","# 전처리 함수 정의\n","def preprocess_image(input_file_path, output_file_path):\n","    # 이미지 데이터 불러오기\n","    image = cv2.imread(input_file_path)\n","\n","    # 이미지 전처리 작업 수행 (예시: 이미지 크기 조정)\n","    resized_image = cv2.resize(image, (50, 50))\n","\n","    # 전처리된 이미지 저장\n","    cv2.imwrite(output_file_path, resized_image)\n","\n","# 폴더 경로 지정\n","input_folder_path = '/content/drive/MyDrive/ghktkd/1st degree burn'\n","output_folder_path = '/content/scaled_1st degree burn'\n","\n","# 폴더 내의 모든 파일을 읽어옴\n","file_list = os.listdir(input_folder_path)\n","\n","# 멀티프로세싱을 위한 프로세스 수\n","num_processes = multiprocessing.cpu_count()\n","\n","# 전처리 작업을 위한 입력 및 출력 파일 경로 리스트 생성\n","input_file_paths = [os.path.join(input_folder_path, file_name) for file_name in file_list]\n","output_file_paths = [os.path.join(output_folder_path, file_name) for file_name in file_list]\n","\n","# 멀티프로세싱을 통한 이미지 전처리\n","with multiprocessing.Pool(processes=num_processes) as pool:\n","    pool.starmap(preprocess_image, zip(input_file_paths, output_file_paths))"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"am3Qq1mr_Upi","executionInfo":{"status":"ok","timestamp":1692317065255,"user_tz":-540,"elapsed":309,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["img_height = 224\n","img_width = 224"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"VBnLTpithmRM","executionInfo":{"status":"ok","timestamp":1692317685898,"user_tz":-540,"elapsed":33030,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["import os\n","from tensorflow.keras.preprocessing import image\n","\n","# 폴더 경로 설정\n","input_folder = '/content/scaled_1st degree burn'\n","output_folder = '/content/scaled_1st degree burn'\n","\n","# 이미지 데이터 증강을 위한 설정\n","data_generator = image.ImageDataGenerator(\n","    rotation_range=30,                # 이미지 회전 각도 범위를 30도로 설정\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    zoom_range=[0.8, 1.2],            # 추가적인 확대/축소 범위를 0.8~1.2로 설정\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    brightness_range=[0.5, 1.5],\n","    channel_shift_range=20\n",")\n","\n","# 폴더 내의 모든 JPG 파일에 대해 증강 수행\n","file_list = os.listdir(input_folder)\n","for file_name in file_list:\n","    if file_name.endswith('.jpg'):\n","        # 이미지 로드\n","        img_path = os.path.join(input_folder, file_name)\n","        img = image.load_img(img_path, target_size=(img_height, img_width))\n","        img = image.img_to_array(img)\n","        img = img.reshape((1,) + img.shape)  # 배치 차원 추가\n","\n","        # 증강된 이미지 생성\n","        augmented_images = data_generator.flow(\n","            x=img,\n","            batch_size=1,\n","            save_to_dir=output_folder,\n","            save_prefix='augmented_',\n","            save_format='jpg'\n","        )\n","\n","        # 증강된 이미지 저장\n","        for i in range(5):  # 5장의 증강된 이미지 생성\n","            augmented_image = next(augmented_images)[0]"]},{"cell_type":"markdown","metadata":{"id":"-YAruLfn5kS7"},"source":["# 화상 2전처리 코드"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OoFVBdRUXZY-"},"outputs":[],"source":["# 전처리 함수 정의\n","def preprocess_image(input_file_path, output_file_path):\n","    # 이미지 데이터 불러오기\n","    image = cv2.imread(input_file_path)\n","\n","    # 이미지 전처리 작업 수행 (예시: 이미지 크기 조정)\n","    resized_image = cv2.resize(image, (50, 50))\n","\n","    # 전처리된 이미지 저장\n","    cv2.imwrite(output_file_path, resized_image)\n","\n","# 폴더 경로 지정\n","input_folder_path = '/content/drive/MyDrive/ghktkd/2nd degree burn'\n","output_folder_path = '/content/scaled_2nd degree burn'\n","\n","# 폴더 내의 모든 파일을 읽어옴\n","file_list = os.listdir(input_folder_path)\n","\n","# 멀티프로세싱을 위한 프로세스 수\n","num_processes = multiprocessing.cpu_count()\n","\n","# 전처리 작업을 위한 입력 및 출력 파일 경로 리스트 생성\n","input_file_paths = [os.path.join(input_folder_path, file_name) for file_name in file_list]\n","output_file_paths = [os.path.join(output_folder_path, file_name) for file_name in file_list]\n","\n","# 멀티프로세싱을 통한 이미지 전처리\n","with multiprocessing.Pool(processes=num_processes) as pool:\n","    pool.starmap(preprocess_image, zip(input_file_paths, output_file_paths))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RHF9VTdna8pn"},"outputs":[],"source":["import os\n","from tensorflow.keras.preprocessing import image\n","\n","# 폴더 경로 설정\n","input_folder = '/content/scaled_2nd degree burn'\n","output_folder = '/content/scaled_2nd degree burn'\n","\n","# 이미지 데이터 증강을 위한 설정\n","data_generator = image.ImageDataGenerator(\n","    rotation_range=30,                # 이미지 회전 각도 범위를 30도로 설정\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    zoom_range=[0.8, 1.2],            # 추가적인 확대/축소 범위를 0.8~1.2로 설정\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    brightness_range=[0.5, 1.5],\n","    channel_shift_range=20\n",")\n","\n","# 폴더 내의 모든 JPG 파일에 대해 증강 수행\n","file_list = os.listdir(input_folder)\n","for file_name in file_list:\n","    if file_name.endswith('.jpg'):\n","        # 이미지 로드\n","        img_path = os.path.join(input_folder, file_name)\n","        img = image.load_img(img_path, target_size=(img_height, img_width))\n","        img = image.img_to_array(img)\n","        img = img.reshape((1,) + img.shape)  # 배치 차원 추가\n","\n","        # 증강된 이미지 생성\n","        augmented_images = data_generator.flow(\n","            x=img,\n","            batch_size=1,\n","            save_to_dir=output_folder,\n","            save_prefix='augmented_',\n","            save_format='jpg'\n","        )\n","\n","        # 증강된 이미지 저장\n","        for i in range(5):  # 5장의 증강된 이미지 생성\n","            augmented_image = next(augmented_images)[0]"]},{"cell_type":"markdown","metadata":{"id":"VaeLbiyh5nP7"},"source":["# 화상 3전처리 코드"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"p0-ZFeY8a8Wg","executionInfo":{"status":"ok","timestamp":1692317055622,"user_tz":-540,"elapsed":856,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["import multiprocessing\n","# 전처리 함수 정의\n","def preprocess_image(input_file_path, output_file_path):\n","    # 이미지 데이터 불러오기\n","    image = cv2.imread(input_file_path)\n","\n","    # 이미지 전처리 작업 수행 (예시: 이미지 크기 조정)\n","    resized_image = cv2.resize(image, (50, 50))\n","\n","    # 전처리된 이미지 저장\n","    cv2.imwrite(output_file_path, resized_image)\n","\n","# 폴더 경로 지정\n","input_folder_path = '/content/drive/MyDrive/ghktkd/3nd degreen burn'\n","output_folder_path = '/content/scaled_3nd degree burn'\n","\n","# 폴더 내의 모든 파일을 읽어옴\n","file_list = os.listdir(input_folder_path)\n","\n","# 멀티프로세싱을 위한 프로세스 수\n","num_processes = multiprocessing.cpu_count()\n","\n","# 전처리 작업을 위한 입력 및 출력 파일 경로 리스트 생성\n","input_file_paths = [os.path.join(input_folder_path, file_name) for file_name in file_list]\n","output_file_paths = [os.path.join(output_folder_path, file_name) for file_name in file_list]\n","\n","# 멀티프로세싱을 통한 이미지 전처리\n","with multiprocessing.Pool(processes=num_processes) as pool:\n","    pool.starmap(preprocess_image, zip(input_file_paths, output_file_paths))"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"zroYd4JoMIj4","executionInfo":{"status":"ok","timestamp":1692317090665,"user_tz":-540,"elapsed":21826,"user":{"displayName":"황기성","userId":"00510822396737292722"}}},"outputs":[],"source":["import os\n","from tensorflow.keras.preprocessing import image\n","\n","# 폴더 경로 설정\n","input_folder = '/content/scaled_3nd degree burn'\n","output_folder = '/content/scaled_3nd degree burn'\n","\n","# 이미지 데이터 증강을 위한 설정\n","data_generator = image.ImageDataGenerator(\n","    rotation_range=30,                # 이미지 회전 각도 범위를 30도로 설정\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,\n","    zoom_range=[0.8, 1.2],            # 추가적인 확대/축소 범위를 0.8~1.2로 설정\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    brightness_range=[0.5, 1.5],\n","    channel_shift_range=20\n",")\n","\n","# 폴더 내의 모든 JPG 파일에 대해 증강 수행\n","file_list = os.listdir(input_folder)\n","for file_name in file_list:\n","    if file_name.endswith('.jpg'):\n","        # 이미지 로드\n","        img_path = os.path.join(input_folder, file_name)\n","        img = image.load_img(img_path, target_size=(img_height, img_width))\n","        img = image.img_to_array(img)\n","        img = img.reshape((1,) + img.shape)  # 배치 차원 추가\n","\n","        # 증강된 이미지 생성\n","        augmented_images = data_generator.flow(\n","            x=img,\n","            batch_size=1,\n","            save_to_dir=output_folder,\n","            save_prefix='augmented_',\n","            save_format='jpg'\n","        )\n","\n","        # 증강된 이미지 저장\n","        for i in range(5):  # 5장의 증강된 이미지 생성\n","            augmented_image = next(augmented_images)[0]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j3JjTRGEcEup"},"outputs":[],"source":["import os\n","import cv2\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from keras.models import Sequential\n","from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n","from matplotlib import pyplot as plt\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fK-5z4x1cEot"},"outputs":[],"source":["image_folder = '/content/drive/MyDrive/microsoft_hackerground/data/'\n","class_folders = ['/content/scaled_1st degree burn',\n","                 '/content/scaled_2nd degree burn',\n","                 '/content/scaled_3nd degree burn']\n","classes = len(class_folders)\n","images = []\n","labels = []"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wsZEP7FLcEml"},"outputs":[],"source":["for i, folder in enumerate(class_folders):\n","    folder_path = os.path.join(image_folder, folder)\n","    image_names = os.listdir(folder_path)\n","    for image_name in image_names:\n","        image = cv2.imread(os.path.join(folder_path, image_name))\n","        image = cv2.resize(image, (224, 224))  # 이미지 크기 조정\n","        images.append(image)\n","        labels.append(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"riZF8vKBLjcj"},"outputs":[],"source":["images = np.array(images)\n","labels = np.array(labels)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Lg5jr6Fxc4G0"},"outputs":[],"source":["train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)"]},{"cell_type":"code","source":["train_images.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2vvaHUTFQjtZ","executionInfo":{"status":"ok","timestamp":1688949292624,"user_tz":-540,"elapsed":543,"user":{"displayName":"황기성","userId":"00510822396737292722"}},"outputId":"115e4433-0fe8-4433-d9d6-12bc8b438fe1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(4007, 224, 224, 3)"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RlV9BiPXdLus"},"outputs":[],"source":["model = Sequential()\n","model.add(Conv2D(32, (3, 3), strides=(4, 4), activation='relu', input_shape=(224, 224, 3)))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Conv2D(64, (3, 3), activation='relu'  ))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(keras.layers.Dropout(0.3))\n","model.add(Flatten())\n","model.add(Dense(16, activation='relu'))\n","model.add(Dense(3, activation='softmax'))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0lBReeddLsJ"},"outputs":[],"source":["model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"taztk_1adVkI","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1688949379968,"user_tz":-540,"elapsed":83854,"user":{"displayName":"황기성","userId":"00510822396737292722"}},"outputId":"2ef0eb74-fb37-4315-f739-98050186e5b6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","126/126 [==============================] - 13s 14ms/step - loss: 7.3422 - accuracy: 0.3863 - val_loss: 1.0925 - val_accuracy: 0.3323\n","Epoch 2/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0917 - accuracy: 0.3901 - val_loss: 1.0894 - val_accuracy: 0.4242\n","Epoch 3/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0870 - accuracy: 0.4090 - val_loss: 1.0834 - val_accuracy: 0.4261\n","Epoch 4/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0802 - accuracy: 0.4083 - val_loss: 1.0809 - val_accuracy: 0.4261\n","Epoch 5/30\n","126/126 [==============================] - 1s 11ms/step - loss: 1.0787 - accuracy: 0.4075 - val_loss: 1.0792 - val_accuracy: 0.4261\n","Epoch 6/30\n","126/126 [==============================] - 1s 12ms/step - loss: 1.0765 - accuracy: 0.4090 - val_loss: 1.0769 - val_accuracy: 0.4271\n","Epoch 7/30\n","126/126 [==============================] - 1s 11ms/step - loss: 1.0781 - accuracy: 0.4108 - val_loss: 1.0764 - val_accuracy: 0.4291\n","Epoch 8/30\n","126/126 [==============================] - 1s 10ms/step - loss: 1.0763 - accuracy: 0.4103 - val_loss: 1.0785 - val_accuracy: 0.4251\n","Epoch 9/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0736 - accuracy: 0.4110 - val_loss: 1.0795 - val_accuracy: 0.4271\n","Epoch 10/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0730 - accuracy: 0.4118 - val_loss: 1.0764 - val_accuracy: 0.4271\n","Epoch 11/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0722 - accuracy: 0.4125 - val_loss: 1.0782 - val_accuracy: 0.4251\n","Epoch 12/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0745 - accuracy: 0.4123 - val_loss: 1.0777 - val_accuracy: 0.4251\n","Epoch 13/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0768 - accuracy: 0.4118 - val_loss: 1.0747 - val_accuracy: 0.4311\n","Epoch 14/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0733 - accuracy: 0.4113 - val_loss: 1.0851 - val_accuracy: 0.4251\n","Epoch 15/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0790 - accuracy: 0.4110 - val_loss: 1.0748 - val_accuracy: 0.4281\n","Epoch 16/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0732 - accuracy: 0.4100 - val_loss: 1.0771 - val_accuracy: 0.4261\n","Epoch 17/30\n","126/126 [==============================] - 1s 11ms/step - loss: 1.0740 - accuracy: 0.4115 - val_loss: 1.0779 - val_accuracy: 0.4251\n","Epoch 18/30\n","126/126 [==============================] - 2s 12ms/step - loss: 1.0721 - accuracy: 0.4115 - val_loss: 1.0759 - val_accuracy: 0.4291\n","Epoch 19/30\n","126/126 [==============================] - 1s 11ms/step - loss: 1.0733 - accuracy: 0.4110 - val_loss: 1.0769 - val_accuracy: 0.4261\n","Epoch 20/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0709 - accuracy: 0.4123 - val_loss: 1.0773 - val_accuracy: 0.4271\n","Epoch 21/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0710 - accuracy: 0.4125 - val_loss: 1.0816 - val_accuracy: 0.4281\n","Epoch 22/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0735 - accuracy: 0.4123 - val_loss: 1.0775 - val_accuracy: 0.4261\n","Epoch 23/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0728 - accuracy: 0.4133 - val_loss: 1.0815 - val_accuracy: 0.4291\n","Epoch 24/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0724 - accuracy: 0.4120 - val_loss: 1.0826 - val_accuracy: 0.4291\n","Epoch 25/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0749 - accuracy: 0.4110 - val_loss: 1.0761 - val_accuracy: 0.4271\n","Epoch 26/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0718 - accuracy: 0.4118 - val_loss: 1.0777 - val_accuracy: 0.4251\n","Epoch 27/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0737 - accuracy: 0.4098 - val_loss: 1.0778 - val_accuracy: 0.4251\n","Epoch 28/30\n","126/126 [==============================] - 1s 9ms/step - loss: 1.0717 - accuracy: 0.4118 - val_loss: 1.0871 - val_accuracy: 0.4261\n","Epoch 29/30\n","126/126 [==============================] - 1s 11ms/step - loss: 1.0711 - accuracy: 0.4133 - val_loss: 1.0773 - val_accuracy: 0.4261\n","Epoch 30/30\n","126/126 [==============================] - 1s 10ms/step - loss: 1.0721 - accuracy: 0.4123 - val_loss: 1.0870 - val_accuracy: 0.4261\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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XLhQa1jFihU1v4eGhmp9FhoaisTERABAUlISmjRpAmdnZ83nrVq1gkqlQnJyMhQKBW7evIn27ds/N4bGjRtrfnd2doabmxtSUlIAACNGjEDPnj1x7NgxvPbaa+jWrRtatmxZonUlIvNjEkREFsvZ2blA95SxODo66jSera2t1nuFQgGVSgUA6NixI65cuYLffvsNO3bsQPv27TFq1CjMnj3b6PESkfGxJoiISq1Dhw4VeF+vXj0AQL169XDixAlkZGRoPt+/fz+srKxQp04duLq6IiAgAAkJCQbFULlyZURHR2PlypWIi4vDd999Z9D8iMh82BJERBYrKysLt2/f1hpmY2OjKT5ev349mjVrhpdffhmrVq3CkSNH8MMPPwAA+vfvj6lTpyI6OhrTpk3D3bt3MWbMGAwYMABeXl4AgGnTpmH48OGoUqUKOnbsiMePH2P//v0YM2aMTvFNmTIFwcHBaNCgAbKysvDrr79qkjAisnxMgojIYm3btg0+Pj5aw+rUqYNz584BkK7cWrt2LUaOHAkfHx+sWbMG9evXBwA4OTnhjz/+wNixY9G8eXM4OTmhZ8+emDNnjmZe0dHRePr0Kb7++muMHz8enp6e6NWrl87x2dnZYeLEibh8+TIcHR3RunVrrF271ghrTkTmoBBCCLmDICLSl0KhwKZNm9CtWze5QyGiUoo1QURERFQuMQkiIiKicok1QURUKrEnn4gMxZYgIiIiKpeYBBEREVG5xCSIiIiIyiUmQURERFQuMQkiIiKicolJEBEREZVLTIKIiIioXGISREREROUSkyAiIiIql/4fNnRenTEUB1gAAAAASUVORK5CYII=\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["history = model.fit(train_images, train_labels, epochs=30, batch_size=32, validation_data=(test_images, test_labels))\n","accuracy = history.history['accuracy']\n","val_accuracy = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(len(accuracy))\n","\n","# 정확도 그래프\n","plt.plot(epochs, accuracy, 'bo', label='Training accuracy')\n","plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')\n","plt.title('Training and validation accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n","\n","# 손실 그래프\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"Efr2LxLMRCh_"},"source":["model = Sequential()\n","model.add(Conv2D(32, (3, 3), activation='selu', input_shape=(224, 224, 3)))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(Conv2D(64, (3, 3), activation='selu'))\n","model.add(MaxPooling2D(pool_size=(2, 2)))\n","model.add(keras.layers.Dropout(0.3))\n","model.add(Flatten())\n","model.add(Dense(64, activation='selu'))\n","model.add(Dense(128, activation='selu'))\n","model.add(Dense(256, activation='selu'))\n","model.add(Dense(3, activation='softmax'))"]},{"cell_type":"markdown","source":["import os\n","import cv2\n","import matplotlib.pyplot as plt\n","\n","# 폴더 경로 지정\n","folder_path = '/content/scaled_1st degree burn'\n","\n","# 폴더 내의 모든 파일을 읽어옴\n","file_list = os.listdir(folder_path)\n","\n","# JPG 파일에 대해서만 처리\n","jpg_files = [file for file in file_list if file.lower().endswith('.jpg')]\n","\n","# 파일별로 반복하여 이미지를 읽어와서 그림으로 출력\n","for jpg_file in jpg_files:\n","    # 파일 경로 생성\n","    file_path = os.path.join(folder_path, jpg_file)\n","\n","    # 이미지 읽기\n","    image = cv2.imread(file_path)\n","    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n","\n","    # 이미지 출력\n","    plt.imshow(image_rgb)\n","    plt.axis('off')\n","    plt.show()"],"metadata":{"id":"gJYeAIAzP3aM"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"oPhYcMTRRIsk"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"15e6oQ85xV6s0hTJZtIXes0rBz63-gVUg","authorship_tag":"ABX9TyP/9ZfwNohMicZqBFgRMobv"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}